{
  color1: "#DE5277",
  color2: "#AA3F5B",
  color3: "#AA3F5B",
  blocks: [
    {
      opcode: "arduinostart",
      blockType: "hat",
      blockType: "conditional",
      branchCount: 2,
      isTerminal: true,
      message2: "loop",
      text: ["$$rosbot_arduinosetup", "$$rosbot_arduinoloop"],
      mode: ["arduino"],
      hatType: true,
      cpp: ["void setup()", "void loop()"],
    },

    "## $$rosbot_title_io",
    // ----------------------------------------------
    {
      opcode: "pinmode",
      blockType: "command",

      text: "$$rosbot_pinmode",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "13",
          menu: "rosbotPin",
        },
        MODE: {
          type: "string",
          menu: "pinMode",
          defaultValue: "0",
        },
      },
      cmd: "M1 [PIN] [MODE]",
      arduino: {
        cpp: "pinMode([PIN],[MODE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "digitalwrite",
      blockType: "command",

      text: "$$rosbot_digitalwrite",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "13",
          menu: "rosbotPin",
        },
        VALUE: {
          type: "number",
          menu: "level",
          defaultValue: "1",
        },
      },
      cmd: "M2 [PIN] [VALUE]",
      arduino: {
        cpp: "digitalWrite([PIN],[VALUE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "analogwrite",
      blockType: "command",
      text: "$$rosbot_analogwrite",
      arguments: {
        PIN: {
          type: "string",
          menu: "analogWritePin",
          defaultValue: "11",
        },
        VALUE: {
          type: "slider",
          defaultValue: 120,
          min: 0,
          max: 255,
        },
      },
      cmd: "M4 [PIN] [VALUE]",
      arduino: {
        cpp: "analogWrite([PIN],[VALUE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "digitalread",
      blockType: "Boolean",
      text: "$$rosbot_digitalread",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "3",
          menu: "rosbotPin",
        },
      },
      cmd: "M3 [PIN]",
      arduino: {
        cpp: "digitalRead([PIN])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "analogread",
      blockType: "reporter",

      text: "$$rosbot_analogread",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "A0",
          menu: "analogPin",
        },
      },
      cmd: "M5 [PIN]",
      arduino: {
        cpp: "analogRead([PIN])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "led",
      blockType: "command",
      text: "$$rosbot_led",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "13",
          menu: "rosbotPin",
        },
        VALUE: {
          type: "string",
          menu: "ledonoff",
          defaultValue: "0",
        },
      },
      cmd: "M2 [PIN] [VALUE]",
      arduino: {
        cpp: "digitalWrite([PIN],[VALUE])",
        object: "kb",
      },
      sepafter: 36,
    },

    "## $$rosbot_title_actuator",
    // ----------------------------------------------
    {
      opcode: "motorspeed",
      blockType: "command",
      text: "$$rosbot_motorspeed",
      arguments: {
        MOTOR: {
          type: "string",
          menu: "motorIndex",
          defaultValue: "0",
        },
        SPEED: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
      },
      cmd: "M200 [MOTOR] [SPEED]",
      arduino: {
        cpp: "kb.motorSetSpeed([MOTOR],[SPEED])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "motordual",
      blockType: "command",
      text: "$$rosbot_motordual",
      arguments: {
        SPDM1A: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
        SPDM1B: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
      },
      cmd: "M204 [SPDM1A] [SPDM1B] 0",
      arduino: {
        cpp: "kb.motorRun2([SPDM1A],[SPDM1B])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "motordualdelay",
      blockType: "command",

      text: "$$rosbot_motordualdelay",
      arguments: {
        SPDM1A: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
        SPDM1B: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
        DELAY: {
          type: "number",
          defaultValue: 500,
        },
      },
      cmd: "M204 [SPDM1A] [SPDM1B] [DELAY]",
      arduino: {
        cpp: "kb.motorRun2Delay([SPDM1A],[SPDM1B],[DELAY])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "motorfour",
      blockType: "command",

      text: "$$rosbot_motorfour",
      arguments: {
        SPDM1A: {
          type: "slider",
          defaultValue: 50,
          min: -255,
          max: 255,
        },
        SPDM1B: {
          type: "slider",
          defaultValue: 50,
          min: -255,
          max: 255,
        },
        SPDM2A: {
          type: "slider",
          defaultValue: -50,
          min: -255,
          max: 255,
        },
        SPDM2B: {
          type: "slider",
          defaultValue: -50,
          min: -255,
          max: 255,
        },
      },
      cmd: "M205 [SPDM1A] [SPDM1B] [SPDM2A] [SPDM2B]",
      arduino: {
        cpp: "kb.motorRun4([SPDM1A],[SPDM1B],[SPDM2A],[SPDM2B])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "stop",
      blockType: "command",
      text: "$$rosbot_stop",
      cmd: "M203",
      arduino: {
        cpp: "kb.motorStop()",
        object: "kb",
      },
      sepafter: 36,
    },
    // ----------------------------------------------
    {
      opcode: "stepperline",
      blockType: "command",
      text: "$$rosbot_stepperline",
      arguments: {
        DISTANCE: {
          type: "number",
          defaultValue: 20,
        },
      },
      cmd: "M101 [DISTANCE]",
      arduino: {
        cpp: "kb.stepLine([DISTANCE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "stepperturn",
      blockType: "command",

      text: "$$rosbot_stepperturn",
      arguments: {
        DEGREE: {
          type: "number",
          defaultValue: 90,
        },
      },
      cmd: "M102 [DEGREE]",
      arduino: {
        cpp: "kb.stepTurn([DEGREE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "stepperppm",
      blockType: "command",

      text: "$$rosbot_stepperppm",
      arguments: {
        PPM: {
          type: "number",
          defaultValue: 14124,
        },
      },
      cmd: "M104 [PPM]",
      arduino: {
        cpp: "kb.ppm = [PPM]",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "stepperwheelbase",
      blockType: "command",

      text: "$$rosbot_stepperwheelbase",
      arguments: {
        WHEELBASE: {
          type: "number",
          defaultValue: 0.118,
        },
      },
      cmd: "M105 [WHEELBASE]",
      arduino: {
        cpp: "kb.baseWidth = [WHEELBASE]",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "stepperarc",
      blockType: "command",

      text: "$$rosbot_stepperarc",
      arguments: {
        RADIUS: {
          type: "number",
          defaultValue: 20,
        },
        DEGREE: {
          type: "number",
          defaultValue: 90,
        },
      },
      cmd: "M103 [RADIUS] [DEGREE]",
      arduino: {
        cpp: "kb.stepArc([RADIUS],[DEGREE])",
        object: "kb",
      },
      sepafter: 36,
    },
    // ----------------------------------------------

    /*
    {
        opcode: 'steppermove',
        blockType: "command",

        text: 'Stepper [STEPPER] DEGREE [DEGREE] RPM [RPM]',
        arguments: {
            STEPPER: {
                type: "string",
                menu: 'stepperIndex',
                defaultValue: 'M1'
            },
            DEGREE: {
                type: "number",
                defaultValue: 360
            },
            RPM: {
                type: "number",
                defaultValue: 11
            }
        },
        func: 'steppermove',
        sepafter: 36
    },
    */

    // {
    //   opcode: "button",
    //   blockType: "Boolean",

    //   text: "$$rosbot_button",
    //   arguments: {
    //     PIN: {
    //       type: "string",
    //       defaultValue: "4",
    //       menu: "extPin",
    //     },
    //   },
    //   cmd: "M10 [PIN]",
    //   arduino: {
    //     cpp: "(!digitalRead([PIN]))",
    //     object: "kb",
    //   },
    // },

    // ----------------------------------------------
    {
      opcode: "servo",
      blockType: "command",
      text: "$$rosbot_servo",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "4",
          menu: "extPin",
        },
        DEGREE: {
          type: "slider",
          defaultValue: 90,
          min: 0,
          max: 180,
        },
        SPEED: {
          type: "slider",
          defaultValue: 128,
          min: 0,
          max: 255,
        },
      },
      cmd: "M212 [PIN] [DEGREE] [SPEED]",
      arduino: {
        cpp: "kb.servoArray([PIN],[DEGREE],[SPEED])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "geekservo",
      blockType: "command",
      text: "$$rosbot_geekservo",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "4",
          menu: "extPin",
        },
        DEGREE: {
          type: "number",
          defaultValue: 90,
        },
        SPEED: {
          type: "slider",
          defaultValue: 128,
          min: 0,
          max: 255,
        },
      },
      cmd: "M213 [PIN] [DEGREE] [SPEED]",
      arduino: {
        cpp: "kb.geekServoArray([PIN],[DEGREE],[SPEED])",
        object: "kb",
      },
      sepafter: 36,
    },

    "## $$rosbot_title_modules",    
    // ----------------------------------------------
    {
      opcode: "tone",
      blockType: "command",
      text: "$$rosbot_tone",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "A0",
          menu: "rosbotPin",
        },
        FREQ: {
          type: "number",
          defaultValue: 200,
        },
        DURATION: {
          type: "number",
          defaultValue: 500,
        },
      },
      cmd: "M6 [PIN] [FREQ] [DURATION]",
      arduino: {
        cpp: "kb.buzzTone([PIN],[FREQ],[DURATION])",
        object: "kb",
      },
      sepafter: 36
    },
    // ----------------------------------------------
    {
      opcode: "rgbbrightness",
      blockType: "command",

      text: "$$rosbot_rgbbrightness",
      arguments: {
        VALUE: {
          type: "slider",
          defaultValue: 100,
          min: 0,
          max: 255,
        },
      },
      cmd: "M11 [VALUE]",
      arduino: {
        cpp: "kb.rgbBrightness([VALUE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "rgbpick",
      blockType: "command",
      text: "$$rosbot_rgbpick",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "4",
          menu: "rosbotPin",
        },
        PIX: {
          type: "number",
          defaultValue: 1,
        },
        COLOR: {
          type: "colorrgb",
          defaultValue: "#00BBFF",
        },
      },
      cmd: "M9 [PIN] [PIX] [COLOR]",
      arduino: {
        cpp: "kb.rgbShow([PIN],[PIX],[COLOR])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "rgb",
      blockType: "command",
      text: "$$rosbot_rgb",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "4",
          menu: "rosbotPin",
        },
        PIX: {
          type: "number",
          defaultValue: "0",
          menu: "rgbPix",
        },
        RED: {
          type: "slider",
          defaultValue: 100,
          min: 0,
          max: 255,
        },
        GREEN: {
          type: "slider",
          defaultValue: 150,
          min: 0,
          max: 255,
        },
        BLUE: {
          type: "slider",
          defaultValue: 0,
          min: 0,
          max: 255,
        },
      },
      cmd: "M9 [PIN] [PIX] [RED] [GREEN] [BLUE]",
      arduino: {
        cpp: "kb.rgbShow([PIN],[PIX],[RED],[GREEN],[BLUE])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "rgboff",
      blockType: "command",
      text: "$$rosbot_rgboff",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "4",
          menu: "rosbotPin",
        },
      },
      cmd: "M9 [PIN] 0 0 0 0",
      arduino: {
        cpp: "kb.rgbShow([PIN],0,0,0,0)",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "distance",
      blockType: "reporter",
      text: "$$rosbot_distance",
      arguments: {
        PIN: {
          type: "string",
          defaultValue: "2",
          menu: "rosbotPin",
        },
      },
      cmd: "M250 [PIN] 99",
      arduino: {
        cpp: "kb.ultrasonic([PIN])",
        object: "kb",
      },
      sepafter: 36
    },
    // ----------------------------------------------
    {
      opcode: "ps2init",
      blockType: "command",

      text: "$$rosbot_ps2init",
      cmd: "M220",
      arduino: {
        cpp: "kb.ps2Init()",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "ps2axis",
      blockType: "reporter",

      text: "$$rosbot_ps2axis",
      arguments: {
        AXIS: {
          type: "string",
          defaultValue: "7",
          menu: "axisList",
        },
      },
      cmd: "M221 [AXIS]",
      arduino: {
        cpp: "(kb.ps2ReadAxis([AXIS]))",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "ps2button",
      blockType: "reporter",

      text: "$$rosbot_ps2button",
      arguments: {
        BUTTON: {
          type: "string",
          defaultValue: "13",
          menu: "buttonList",
        },
      },
      cmd: "M222 [BUTTON]",
      arduino: {
        cpp: "kb.ps2ReadButton([BUTTON])",
        object: "kb",
      },
    },
    // ----------------------------------------------
    {
      opcode: "omniwheel",
      blockType: "command",

      text: "$$rosbot_omniwheel",
      arguments: {
        SPDX: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
        SPDY: {
          type: "slider",
          defaultValue: 100,
          min: -255,
          max: 255,
        },
        SPDR: {
          type: "slider",
          defaultValue: 0,
          min: 0,
          max: 255,
        },
      },
      cmd: "M209 [SPDX] [SPDY] [SPDR]",
      arduino: {
        cpp: "kb.omniWheel([SPDX],[SPDY],[SPDR])",
        object: "kb",
      },
      sepafter: 36,
    },

    // ----------------------------------------------
    {
      opcode: "power",
      blockType: "reporter",
      text: "$$rosbot_power",
      cmd: "M8",
      arduino: {
        cpp: "kb.getBatteryVoltage()",
        object: "kb",
      },
    },
    // ----------------------------------------------
    // {
    //   opcode: "ledstring",
    //   blockType: "command",

    //   text: "$$rosbot_ledstring",
    //   arguments: {
    //     STR: {
    //       type: "string",
    //       defaultValue: "hello world",
    //     },
    //   },
    //   cmd: "M20 [STR]",
    //   arduino: {
    //     cpp: "kb.matrixShowString([STR])",
    //     object: "kb",
    //   },
    // },
    // ----------------------------------------------
    // {
    //   opcode: "ledmatrix",
    //   blockType: "command",

    //   text: "$$rosbot_ledmatrix",
    //   arguments: {
    //     MAT: {
    //       type: "ledmatrix",
    //       defaultValue: "00000000024000000000042003c00000",
    //     },
    //   },
    //   cmd: "M21 [MAT]",
    //   arduino: {
    //     cpp: "kb.matrixShow([MAT])",
    //     object: "kb",
    //   },
    // },
    // // ----------------------------------------------
    // {
    //   opcode: "ledmatrixclear",
    //   blockType: "command",

    //   text: "$$rosbot_ledmatrixclear",
    //   cmd: "M21 00000000000000000000000000000000",
    //   arduino: {
    //     cpp: 'kb.matrixShow("00000000000000000000000000000000")',
    //     object: "kb",
    //   },
    // },
    // // ----------------------------------------------
    // {
    //   opcode: "ledmatrixrect",
    //   blockType: "command",

    //   text: "$$rosbot_ledmatrixrect",
    //   arguments: {
    //     X: {
    //       type: "number",
    //       defaultValue: 2,
    //     },
    //     Y: {
    //       type: "number",
    //       defaultValue: 2,
    //     },
    //     W: {
    //       type: "number",
    //       defaultValue: 3,
    //     },
    //     H: {
    //       type: "number",
    //       defaultValue: 3,
    //     },
    //     C: {
    //       type: "number",
    //       defaultValue: 1,
    //     },
    //   },
    //   cmd: "M22 [X] [Y] [W] [H] [C]",
    //   arduino: {
    //     cpp: "kb.matrixFillRect([X],[Y],[W],[H],[C])",
    //     object: "kb",
    //   },
    // },
    // // ----------------------------------------------
    // {
    //   opcode: "mp3play",
    //   blockType: "command",

    //   text: "$$rosbot_mp3play",
    //   arguments: {
    //     IO1: {
    //       type: "string",
    //       defaultValue: "4",
    //       menu: "rosbotPin",
    //     },
    //     IO2: {
    //       type: "string",
    //       defaultValue: "7",
    //       menu: "rosbotPin",
    //     },
    //   },
    //   cmd: "M31 [IO1] [IO2] 100",
    //   arduino: {
    //     cpp: "kb.extIoSet([IO1],[IO2], 100)",
    //     object: "kb",
    //   },
    // },
    // // ----------------------------------------------
    // {
    //   opcode: "mp3loop",
    //   blockType: "command",
    //   text: "$$rosbot_mp3loop",
    //   arguments: {
    //     DIR: {
    //       type: "number",
    //       defaultValue: "0, 1",
    //       menu: "mp3direction",
    //     },
    //   },
    //   cmd: "M30 [DIR] 100",
    //   arduino: {
    //     cpp: "kb.extIo([DIR], 100)", // TODO
    //     object: "kb",
    //   },
    // },
    // // ----------------------------------------------
    // {
    //   opcode: "mp3volumn",
    //   blockType: "command",
    //   text: "$$rosbot_mp3volumn",
    //   arguments: {
    //     VOLUMN: {
    //       type: "number",
    //       defaultValue: "0, 1",
    //       menu: "volumnList",
    //     },
    //   },
    //   cmd: "M30 [VOLUMN] 500",
    //   arduino: {
    //     cpp: "kb.extIo([VOLUMN], 500)", // TODO
    //     object: "kb",
    //   },
    // },
  ],
  menus: {
    pinMode: [
      { text: "INPUT", value: "0" },
      { text: "OUTPUT", value: "1" },
      { text: "INPUT_PULLUP", value: "2" },
    ],
    level: [
      { text: "HIGH", value: 1 },
      { text: "LOW", value: 0 },
    ],
    onoff: [
      { text: "ON", value: "0" },
      { text: "OFF", value: "1" },
    ],
    motorIndex: [
      { text: "M1A", value: "0" },
      { text: "M1B", value: "1" },
      { text: "M2A", value: "2" },
      { text: "M2B", value: "3" },
    ],
    blinkCmd: ["blink", "stop"],
    digiPin: [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
      "13",
      "A0",
      "A1",
      "A2",
      "A3",
      "A4",
      "A5",
    ],
    extPin: [
      { text: "4", value: "0" },
      { text: "7", value: "1" },
      { text: "8", value: "2" },
      { text: "11", value: "3" },
      { text: "12", value: "4" },
      { text: "13", value: "5" },
      { text: "A0", value: "6" },
      { text: "A1", value: "7" },
      { text: "A2", value: "8" },
      { text: "A3", value: "9" },
    ],
    rosbotPin: [
      { text: "2", value: "2" },
      { text: "3", value: "3" },
      { text: "4", value: "4" },
      { text: "5", value: "5" },
      { text: "6", value: "6" },
      { text: "7", value: "7" },
      { text: "8", value: "8" },
      { text: "9", value: "9" },
      { text: "10", value: "10" },
      { text: "11", value: "11" },
      { text: "12", value: "12" },
      { text: "13", value: "13" },
      { text: "A0", value: "A0" },
      { text: "A1", value: "A1" },
      { text: "A2", value: "A2" },
      { text: "A3", value: "A3" },
      { text: "A4", value: "A4" },
      { text: "A5", value: "A5" },
    ],
    analogPin: ["A0", "A1", "A2", "A3", "A4", "A5"],
    analogWritePin: ["3", "5", "6", "9", "10", "11"],
    ledonoff: [
      { text: "ON", value: "0" },
      { text: "OFF", value: "1" },
    ],
    serialtype: [
      { text: "Serial", value: "Serial" },
      { text: "Soft Serial", value: "softser" },
    ],
    axisList: [
      { text: "L-X", value: "7" },
      { text: "L-Y", value: "8" },
      { text: "R-X", value: "5" },
      { text: "R-Y", value: "6" },
    ],
    StrTypo: ["HEX", "BIN", "DEC"],
    Typo: ["byte", "char", "int", "long", "word", "float"],
    // 'UP', 'DOWN'
    volumnList: [
      { text: "UP", value: "0, 1" },
      { text: "DOWN", value: "1, 0" },
    ],
    // 'NEXT', 'PREVIOUS'
    mp3direction: [
      { text: "NEXT", value: "0, 1" },
      { text: "PREVIOUS", value: "1, 0" },
    ],
    buttonList: [
      { text: "→", value: 9 },
      { text: "↑", value: 11 },
      { text: "↓", value: 12 },
      { text: "←", value: 10 },

      { text: "▲", value: 13 },
      { text: "●", value: 14 },
      { text: "×", value: 15 },
      { text: "■", value: 16 },

      { text: "L2", value: 19 },
      { text: "R2", value: 20 },
      { text: "L1", value: 17 },
      { text: "R1", value: 18 },
    ],
    rgbPix: [
      { text: "ALL", value: 0 },
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
    ],
  },
}
