{
  blocks: [
    {
        opcode: 'arduinostart',
        blockType: 'conditional',
        branchCount: 2,
        isTerminal: true,
        message2: 'loop',
        text: [
          "Setup",
          "Loop",
        ],
        hatType: true,
        mode: ['arduino'],
        // branch functions
        cpp: ['void setup()', 'void loop()']
    },
    {
        func: 'noop',
        blockType: 'divlabel',
        text: "$$arduino_title_serial",
    },
    {
        opcode: 'serialreadline',
        blockType: 'conditional',

        branchCount: 1,
        isTerminal: false,

        text: "$$arduino_serialreadline",
        arguments: {
            SERIAL: {
                type: 'string',
                menu: 'serialtype',
                defaultValue: 'Serial'
            }
        },
        mode: ['arduino'],
    },
    {
        opcode: 'serialavailable',
        blockType: 'Boolean',
        text: "$$arduino_serialavailable",
        arguments: {
            SERIAL: {
                type: 'string',
                menu: 'serialtype',
                defaultValue: 'Serial'
            }
        },
        mode: ['arduino']
    },
    {
        opcode: 'serialread',
        blockType: 'reporter',
        text: "$$arduino_serialread",
        arguments: {
            SERIAL: {
                type: 'string',
                menu: 'serialtype',
                defaultValue: 'Serial'
            }
        },
        mode: ['arduino'],
        cpp: '[SERIAL].read()'
    },
    {
        opcode: 'serialbegin',
        blockType: 'command',
        text: "$$arduino_serialbegin",
        arguments: {
            BAUD: {
                type: 'number',
                defaultValue: 115200
            }
        },
        sepafter: 36,
        mode: ['arduino'],
        cpp: 'Serial.begin([BAUD])'
    },
    {
        opcode: 'println',
        blockType: 'command',

        text: "$$arduino_println",
        arguments: {
            TEXT: {
                type: 'string',
                defaultValue: 'Hello World'
            }
        },
        mode: ['arduino'],
        cpp: 'Serial.println([TEXT])'
    },
    {
        opcode: 'printvalue',
        blockType: 'command',

        text: "$$arduino_printvalue",
        arguments: {
            TEXT: {
                type: 'string',
                defaultValue: 'Apple'
            },
            VALUE: {
                type: 'number',
                defaultValue: 123
            }
        },
        mode: ['arduino'],
        cpp: 'Serial.println(String([TEXT]) + String("=") + String(VALUE))'
    },
    {
        opcode: 's4xparse',
        blockType: 'command',

        text: "$$arduino_s4xparse",
        arguments: {
            PARAM: {
                type: 'string',
                defaultValue: 'Apple'
            }
        },
        sepafter: 36,
        mode: ['arduino']
    },
    {
        opcode: 'softwareserial',
        blockType: 'command',

        text: "$$arduino_softwareserial",
        arguments: {
            TX: {
                type: 'string',
                defaultValue: '3',
                menu: 'digiPin'
            },
            RX: {
                type: 'string',
                defaultValue: '4',
                menu: 'digiPin'
            },
            BAUD: {
                type: 'number',
                defaultValue: 9600
            }
        },
        mode: ['arduino']
    },
    {
        opcode: 'softwareserialprintln',
        blockType: 'command',
        text: "$$arduino_softwareserialprintln",
        arguments: {
            TEXT: {
                type: 'string',
                defaultValue: 'Hello World'
            }
        },
        mode: ['arduino']
    },
    {
        func: 'noop',
        blockType: 'divlabel',
        text: 'GPIO'
    },
    {
        opcode: 'pinmode',
        blockType: 'command',
        text: "$$arduino_pinmode",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: '13',
                menu: 'digiPin'
            },
            MODE: {
                type: 'string',
                menu: 'pinMode',
                defaultValue: 1
            }
        },
        firmata: {
            cmd: 'pinMode([PIN], [MODE])'
        }
    },
    {
        opcode: 'digitalwrite',
        blockType: 'command',
        text: "$$arduino_digitalwrite",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: '13',
                menu: 'digiPin'
            },
            VALUE: {
                type: 'number',
                menu: 'level',
                defaultValue: 1
            }
        },
        firmata: {
            cmd: 'digitalWrite([PIN], [VALUE])'
        }
    },
    {
        opcode: 'analogwrite',
        blockType: 'command',

        text: "$$arduino_analogwrite",
        arguments: {
            PIN: {
                type: 'string',
                menu: 'analogWritePin',
                defaultValue: '3'
            },
            VALUE: {
                type: 'slider',
                defaultValue: 120
            }
        },
        firmata: {
            cmd: 'analogWrite([PIN], [VALUE])'
        }
    },
    {
        opcode: 'digitalread',
        blockType: 'Boolean',
        text: "$$arduino_digitalread",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: '3',
                menu: 'digiPin'
            }
        },
        firmata: {
            cmd: 'digitalRead([PIN], ##CALLBACK##)'
        }
    },
    {
        opcode: 'analogread',
        blockType: 'reporter',

        text: "$$arduino_analogread",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: 'A0',
                menu: 'analogPin'
            }
        },
        firmata: {
            cmd: 'analogRead([PIN], ##CALLBACK##)'
        },
        sepafter: 36
    },
    {
        opcode: 'ledblink',
        blockType: 'command',
        text: "Blink [PIN] blink [DELAY]ms",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: '13',
                menu: 'digiPin'
            },
            DELAY: {
                type: 'number',
                defaultValue: 500
            }
        },
        mode: ['stage'],
        firmata: {
            key: 'led[PIN]',
            device: 'Led([PIN])',
            cmd: 'blink([DELAY])'
        },
    },
    {
        opcode: 'ledblinkstop',
        blockType: 'command',
        text: "Blink [PIN] stop",
        arguments: {
            PIN: {
                type: 'string',
                defaultValue: '13',
                menu: 'digiPin'
            }
        },
        mode: ['stage'],
        firmata: {
            key: 'led[PIN]',
            device: 'Led([PIN])',
            cmd: 'stop()'
        },
    },
    {
        opcode: 'mapping',
        blockType: 'reporter',

        text: "$$arduino_mapping",
        arguments: {
            VAL: {
                type: 'number',
                defaultValue: 100
            },
            FROMLOW: {
                type: 'number',
                defaultValue: 0
            },
            FROMHIGH: {
                type: 'number',
                defaultValue: 255
            },
            TOLOW: {
                type: 'number',
                defaultValue: 0
            },
            TOHIGH: {
                type: 'number',
                defaultValue: 1024
            }
        },
        hideFromPalette: true, // replaced by math mapping
    },
    {
        opcode: 'millis',
        blockType: 'reporter',

        text: "$$arduino_millis",
        mode: ['arduino']
    },
    {
        opcode: 'stringtypo',
        blockType: 'reporter',
        text: "$$arduino_stringtypo",
        arguments: {
            TEXT: {
                type: 'string',
                defaultValue: '123'
            },
            TYPO: {
                type: 'string',
                defaultValue: 'HEX',
                menu: 'StrTypo'
            }
        },
        mode: ['arduino']
    },
    {
        opcode: 'typecast',
        blockType: 'reporter',
        text: "$$arduino_typecast",
        arguments: {
            VALUE: {
                type: 'string',
                defaultValue: '123'
            },
            TYPO: {
                type: 'string',
                defaultValue: 'char',
                menu: 'Typo'
            }
        },
        mode: ['arduino']
    },
    {
        func: 'noop',
        blockType: 'divlabel',
        text: 'I2C'
    },
    {
        opcode: 'wireBegin',
        blockType: 'command',
        text: "$$arduino_wiretrans",
        arguments: {
            ADDR: {
                type: 'string',
                defaultValue: '0x12'
            }
        },
        firmata: {
            cmd: 'i2cConfig({address: [ADDR]})'
        },
    },
    {
        opcode: 'wireWrite',
        blockType: 'command',
        text: "$$arduino_wirewrite",
        arguments: {
            ADDR: {
                type: 'number',
                defaultValue: 78
            },
            DATA: {
                type: 'string',
                defaultValue: 'abc'
            }
        },
        firmata: {
            cmd: 'i2cWrite([ADDR], [DATA])'
        },
    },
    {
        opcode: 'wireRead',
        blockType: 'reporter',
        text: "$$arduino_wireread",
        arguments: {
            ADDR: {
                type: 'string',
                defaultValue: '0x12'
            },
            LEN: {
                type: 'number',
                defaultValue: 6
            }
        },
        firmata: {
            cmd: 'i2cRead([ADDR], [DATA], [LEN], ##CALLBACK##)'
        },
    },
    {
        opcode: 'wireEnd',
        blockType: 'command',
        text: "$$arduino_wireEnd",
        firmata: {
            cmd: 'i2cStop()'
        },
    },
    '---',
    {
        opcode: 'commWrite',
        blockType: 'command',
        text: "$$arduino_commwrite",
        arguments: {
            DATA: {
                type: 'string',
                defaultValue: 'abc'
            }
        },
        mode: ['stage']
    }
  ],
  menus: {
    pinMode: [
        {text: "input", value: '0'},
        {text: "output", value: '1'},
        {text: "inputpullup", value: '2'}
    ],
    level: [
        {text: "high", value: 1},
        {text: "low", value: 0}],
    onoff: [
        {text: "on", value: '0'},
        {text: "off", value: '1'}
    ],
    blinkCmd: ['blink', 'stop'],
    digiPin: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13',
        'A0', 'A1', 'A2', 'A3', 'A4', 'A5'],
    analogPin: ['A0', 'A1', 'A2', 'A3', 'A4', 'A5'],
    analogWritePin: ['3', '5', '6', '9', '10', '11'],
    serialtype: [{text: 'Serial', value: 'Serial'}, {text: 'Soft Serial', value: 'softser'}],
    StrTypo: ['HEX', 'BIN', 'DEC'],
    Typo: ['byte', 'char', 'int', 'long', 'word', 'float']
  }

}